Первой представление реализации поставленной задачи

Описания объекта по парсингу разметки:
1. Объект будет содержать массив элементов хранящих:
	* элемент разметки (начальный и конечный, если конечный эелемент - пустая строка, 
						то тег будет закрываться либо при новом таком теге,
						либо при необходимости - например, нарушения вложенности(см. 4)
	* html эквиволент
	* список элементов работающих внутри
2. Объет можно будет натраивать:
	* Добовлять элементы разметки
	* Удалять элементы разметки
3. Все символы '\' будут обозначать игнорирование следующего символа в потоке, то есть прямой перенос его в итоговый html файл
4. Все элементы должны быть вложены один в дугой _Вот такой `текст_ должен интерпретировать` только подчеркивание, а ковычки считать как символы

Методы:
1. конструктор(принемает список элементов разметки)
2. удаление элемента
3. добавление элемента
4. парсинг строки по заданным параметрам(возвращает html-код)
5. парсинг массива строк(перегрузка реализации для удобства)
6. обратная конвертация(фича на будущее, дедали обработки HTML-кода опускаю)

Примеры элементов:

Последовательность из двух переводов строки, 
между которыми нет ничего кроме пробельных символов, начинает новый абзац. 
Каждый абзац должен быть заключен в теги <p>...</p>
Пример{"\n\s*\n", ""; "<p>", "</p>"; all}

Текст _окруженный с двух сторон_  одинарными символами подчерка 
должен помещаться в тег <em>.
Пример{"[^a-zA-Z0-9]_", "_[^a-zA-Z0-9]"; "<em>", "</em>"; all}

__Двумя символами__ — должен становиться жирным с помощью тега <strong>.
Пример{"[^a-zA-Z0-9]__", "__[^a-zA-Z0-9]"; "<strong>", "</strong>"; all}

Текст окруженный `одинарными _обратными_ кавычками` (backticks) должен попадать в тег <code>,
и к нему не нужно применять остальные правила форматирования. 
То есть слово "обратными" не должно выделиться <em> внутри code.
Пример{"[^a-zA-Z0-9]`", "`[^a-zA-Z0-9]"; "<code>", "</code>"; none}
